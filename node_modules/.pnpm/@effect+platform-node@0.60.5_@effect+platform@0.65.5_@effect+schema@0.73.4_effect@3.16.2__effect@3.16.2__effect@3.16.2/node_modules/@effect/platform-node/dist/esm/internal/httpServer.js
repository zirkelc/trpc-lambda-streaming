import * as MultipartNode from "@effect/platform-node-shared/NodeMultipart";
import * as Cookies from "@effect/platform/Cookies";
import * as Etag from "@effect/platform/Etag";
import * as FileSystem from "@effect/platform/FileSystem";
import * as App from "@effect/platform/HttpApp";
import * as IncomingMessage from "@effect/platform/HttpIncomingMessage";
import * as Server from "@effect/platform/HttpServer";
import * as Error from "@effect/platform/HttpServerError";
import * as ServerRequest from "@effect/platform/HttpServerRequest";
import * as Socket from "@effect/platform/Socket";
import * as Config from "effect/Config";
import * as Effect from "effect/Effect";
import * as FiberSet from "effect/FiberSet";
import * as Layer from "effect/Layer";
import * as Option from "effect/Option";
import * as Scope from "effect/Scope";
import * as Stream from "effect/Stream";
import * as Http from "node:http";
import { Readable } from "node:stream";
import { pipeline } from "node:stream/promises";
import * as WS from "ws";
import * as NodeContext from "../NodeContext.js";
import * as NodeHttpClient from "../NodeHttpClient.js";
import * as NodeSink from "../NodeSink.js";
import { HttpIncomingMessageImpl } from "./httpIncomingMessage.js";
import * as internalPlatform from "./httpPlatform.js";
/** @internal */
export const make = (evaluate, options) => Effect.gen(function* (_) {
  const scope = yield* Effect.scope;
  const server = yield* Effect.acquireRelease(Effect.sync(evaluate), server => Effect.async(resume => {
    if (!server.listening) {
      return resume(Effect.void);
    }
    server.close(error => {
      if (error) {
        resume(Effect.die(error));
      } else {
        resume(Effect.void);
      }
    });
  }));
  yield* Effect.async(resume => {
    function onError(cause) {
      resume(Effect.fail(new Error.ServeError({
        cause
      })));
    }
    server.on("error", onError);
    server.listen(options, () => {
      server.off("error", onError);
      resume(Effect.void);
    });
  });
  const address = server.address();
  const wss = yield* _(Effect.acquireRelease(Effect.sync(() => new WS.WebSocketServer({
    noServer: true
  })), wss => Effect.async(resume => {
    wss.close(() => resume(Effect.void));
  })), Scope.extend(scope), Effect.cached);
  return Server.make({
    address: typeof address === "string" ? {
      _tag: "UnixAddress",
      path: address
    } : {
      _tag: "TcpAddress",
      hostname: address.address === "::" ? "0.0.0.0" : address.address,
      port: address.port
    },
    serve: (httpApp, middleware) => Effect.gen(function* (_) {
      const handler = yield* _(makeHandler(httpApp, middleware));
      const upgradeHandler = yield* _(makeUpgradeHandler(wss, httpApp, middleware));
      yield* _(Effect.addFinalizer(() => Effect.sync(() => {
        server.off("request", handler);
        server.off("upgrade", upgradeHandler);
      })));
      server.on("request", handler);
      server.on("upgrade", upgradeHandler);
    })
  });
}).pipe(Effect.locally(IncomingMessage.maxBodySize, Option.some(FileSystem.Size(1024 * 1024 * 10))));
/** @internal */
export const makeHandler = (httpApp, middleware) => {
  const handledApp = App.toHandled(httpApp, handleResponse, middleware);
  return Effect.map(FiberSet.makeRuntime(), runFork => function handler(nodeRequest, nodeResponse) {
    const fiber = runFork(Effect.provideService(handledApp, ServerRequest.HttpServerRequest, new ServerRequestImpl(nodeRequest, nodeResponse)));
    nodeResponse.on("close", () => {
      if (!nodeResponse.writableEnded) {
        fiber.unsafeInterruptAsFork(Error.clientAbortFiberId);
      }
    });
  });
};
/** @internal */
export const makeUpgradeHandler = (lazyWss, httpApp, middleware) => {
  const handledApp = App.toHandled(httpApp, handleResponse, middleware);
  return Effect.map(FiberSet.makeRuntime(), runFork => function handler(nodeRequest, socket, head) {
    let nodeResponse_ = undefined;
    const nodeResponse = () => {
      if (nodeResponse_ === undefined) {
        nodeResponse_ = new Http.ServerResponse(nodeRequest);
        nodeResponse_.assignSocket(socket);
      }
      return nodeResponse_;
    };
    const upgradeEffect = Socket.fromWebSocket(Effect.flatMap(lazyWss, wss => Effect.acquireRelease(Effect.async(resume => wss.handleUpgrade(nodeRequest, socket, head, ws => {
      resume(Effect.succeed(ws));
    })), ws => Effect.sync(() => ws.close()))));
    const fiber = runFork(Effect.provideService(handledApp, ServerRequest.HttpServerRequest, new ServerRequestImpl(nodeRequest, nodeResponse, upgradeEffect)));
    socket.on("close", () => {
      if (!socket.writableEnded) {
        fiber.unsafeInterruptAsFork(Error.clientAbortFiberId);
      }
    });
  });
};
class ServerRequestImpl extends HttpIncomingMessageImpl {
  source;
  response;
  upgradeEffect;
  url;
  headersOverride;
  [ServerRequest.TypeId];
  constructor(source, response, upgradeEffect, url = source.url, headersOverride, remoteAddressOverride) {
    super(source, cause => new Error.RequestError({
      request: this,
      reason: "Decode",
      cause
    }), remoteAddressOverride);
    this.source = source;
    this.response = response;
    this.upgradeEffect = upgradeEffect;
    this.url = url;
    this.headersOverride = headersOverride;
    this[ServerRequest.TypeId] = ServerRequest.TypeId;
  }
  cachedCookies;
  get cookies() {
    if (this.cachedCookies) {
      return this.cachedCookies;
    }
    return this.cachedCookies = Cookies.parseHeader(this.headers.cookie ?? "");
  }
  get resolvedResponse() {
    return typeof this.response === "function" ? this.response() : this.response;
  }
  modify(options) {
    return new ServerRequestImpl(this.source, this.response, this.upgradeEffect, options.url ?? this.url, options.headers ?? this.headersOverride, options.remoteAddress ?? this.remoteAddressOverride);
  }
  get originalUrl() {
    return this.source.url;
  }
  get method() {
    return this.source.method.toUpperCase();
  }
  get headers() {
    this.headersOverride ??= this.source.headers;
    return this.headersOverride;
  }
  multipartEffect;
  get multipart() {
    if (this.multipartEffect) {
      return this.multipartEffect;
    }
    this.multipartEffect = Effect.runSync(Effect.cached(MultipartNode.persisted(this.source, this.source.headers)));
    return this.multipartEffect;
  }
  get multipartStream() {
    return MultipartNode.stream(this.source, this.source.headers);
  }
  get upgrade() {
    return this.upgradeEffect ?? Effect.fail(new Error.RequestError({
      request: this,
      reason: "Decode",
      description: "not an upgradeable ServerRequest"
    }));
  }
  toString() {
    return `ServerRequest(${this.method} ${this.url})`;
  }
  toJSON() {
    return IncomingMessage.inspect(this, {
      _id: "@effect/platform/HttpServerRequest",
      method: this.method,
      url: this.originalUrl
    });
  }
}
/** @internal */
export const layerServer = (evaluate, options) => Layer.scoped(Server.HttpServer, make(evaluate, options));
/** @internal */
export const layer = (evaluate, options) => Layer.mergeAll(Layer.scoped(Server.HttpServer, make(evaluate, options)), internalPlatform.layer, Etag.layerWeak, NodeContext.layer);
/** @internal */
export const layerTest = /*#__PURE__*/Server.layerTestClient.pipe( /*#__PURE__*/Layer.provide(NodeHttpClient.layerWithoutAgent), /*#__PURE__*/Layer.provide( /*#__PURE__*/NodeHttpClient.makeAgentLayer({
  keepAlive: false
})), /*#__PURE__*/Layer.provideMerge( /*#__PURE__*/layer(Http.createServer, {
  port: 0
})));
/** @internal */
export const layerConfig = (evaluate, options) => Layer.mergeAll(Layer.scoped(Server.HttpServer, Effect.flatMap(Config.unwrap(options), options => make(evaluate, options))), internalPlatform.layer, Etag.layerWeak, NodeContext.layer);
const handleResponse = (request, response) => Effect.suspend(() => {
  const nodeResponse = request.resolvedResponse;
  if (nodeResponse.writableEnded) {
    return Effect.void;
  }
  let headers = response.headers;
  if (!Cookies.isEmpty(response.cookies)) {
    headers = {
      ...headers
    };
    const toSet = Cookies.toSetCookieHeaders(response.cookies);
    if (headers["set-cookie"] !== undefined) {
      toSet.push(headers["set-cookie"]);
    }
    headers["set-cookie"] = toSet;
  }
  if (request.method === "HEAD") {
    nodeResponse.writeHead(response.status, headers);
    return Effect.async(resume => {
      nodeResponse.end(() => resume(Effect.void));
    });
  }
  const body = response.body;
  switch (body._tag) {
    case "Empty":
      {
        nodeResponse.writeHead(response.status, headers);
        nodeResponse.end();
        return Effect.void;
      }
    case "Raw":
      {
        nodeResponse.writeHead(response.status, headers);
        if (typeof body.body === "object" && body.body !== null && "pipe" in body.body && typeof body.body.pipe === "function") {
          return Effect.tryPromise({
            try: signal => pipeline(body.body, nodeResponse, {
              signal,
              end: true
            }),
            catch: cause => new Error.ResponseError({
              request,
              response,
              reason: "Decode",
              cause
            })
          }).pipe(Effect.interruptible, Effect.tapErrorCause(handleCause(nodeResponse)));
        }
        return Effect.async(resume => {
          nodeResponse.end(body.body, () => resume(Effect.void));
        });
      }
    case "Uint8Array":
      {
        nodeResponse.writeHead(response.status, headers);
        return Effect.async(resume => {
          nodeResponse.end(body.body, () => resume(Effect.void));
        });
      }
    case "FormData":
      {
        return Effect.suspend(() => {
          const r = new Response(body.formData);
          nodeResponse.writeHead(response.status, {
            ...headers,
            ...Object.fromEntries(r.headers)
          });
          return Effect.async((resume, signal) => {
            Readable.fromWeb(r.body, {
              signal
            }).pipe(nodeResponse).on("error", cause => {
              resume(Effect.fail(new Error.ResponseError({
                request,
                response,
                reason: "Decode",
                cause
              })));
            }).once("finish", () => {
              resume(Effect.void);
            });
          }).pipe(Effect.interruptible, Effect.tapErrorCause(handleCause(nodeResponse)));
        });
      }
    case "Stream":
      {
        nodeResponse.writeHead(response.status, headers);
        return Stream.run(Stream.mapError(body.stream, cause => new Error.ResponseError({
          request,
          response,
          reason: "Decode",
          cause
        })), NodeSink.fromWritable(() => nodeResponse, cause => new Error.ResponseError({
          request,
          response,
          reason: "Decode",
          cause
        }))).pipe(Effect.interruptible, Effect.tapErrorCause(handleCause(nodeResponse)));
      }
  }
});
const handleCause = nodeResponse => cause => Error.causeResponse(cause).pipe(Effect.flatMap(([response, cause]) => {
  if (!nodeResponse.headersSent) {
    nodeResponse.writeHead(response.status);
  }
  if (!nodeResponse.writableEnded) {
    nodeResponse.end();
  }
  return Effect.failCause(cause);
}));
/** @internal */
export const toIncomingMessage = self => self.source;
/** @internal */
export const toServerResponse = self => {
  const res = self.response;
  return typeof res === "function" ? res() : res;
};
//# sourceMappingURL=httpServer.js.map