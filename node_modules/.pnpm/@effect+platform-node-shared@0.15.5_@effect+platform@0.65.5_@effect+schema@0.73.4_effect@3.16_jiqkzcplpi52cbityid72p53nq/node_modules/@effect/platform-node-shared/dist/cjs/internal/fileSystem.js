"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layer = void 0;
var _Effectify = require("@effect/platform/Effectify");
var Error = _interopRequireWildcard(require("@effect/platform/Error"));
var FileSystem = _interopRequireWildcard(require("@effect/platform/FileSystem"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var _Function = require("effect/Function");
var Layer = _interopRequireWildcard(require("effect/Layer"));
var Option = _interopRequireWildcard(require("effect/Option"));
var Stream = _interopRequireWildcard(require("effect/Stream"));
var Crypto = _interopRequireWildcard(require("node:crypto"));
var NFS = _interopRequireWildcard(require("node:fs"));
var OS = _interopRequireWildcard(require("node:os"));
var Path = _interopRequireWildcard(require("node:path"));
var _error = require("./error.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const handleBadArgument = method => err => Error.BadArgument({
  module: "FileSystem",
  method,
  message: err.message ?? String(err)
});
// == access
const access = /*#__PURE__*/(() => {
  const nodeAccess = /*#__PURE__*/(0, _Effectify.effectify)(NFS.access, /*#__PURE__*/(0, _error.handleErrnoException)("FileSystem", "access"), /*#__PURE__*/handleBadArgument("access"));
  return (path, options) => {
    let mode = NFS.constants.F_OK;
    if (options?.readable) {
      mode |= NFS.constants.R_OK;
    }
    if (options?.writable) {
      mode |= NFS.constants.W_OK;
    }
    return nodeAccess(path, mode);
  };
})();
// == copy
const copy = /*#__PURE__*/(() => {
  const nodeCp = /*#__PURE__*/(0, _Effectify.effectify)(NFS.cp, /*#__PURE__*/(0, _error.handleErrnoException)("FileSystem", "copy"), /*#__PURE__*/handleBadArgument("copy"));
  return (fromPath, toPath, options) => nodeCp(fromPath, toPath, {
    force: options?.overwrite ?? false,
    preserveTimestamps: options?.preserveTimestamps ?? false,
    recursive: true
  });
})();
// == copyFile
const copyFile = /*#__PURE__*/(() => {
  const nodeCopyFile = /*#__PURE__*/(0, _Effectify.effectify)(NFS.copyFile, /*#__PURE__*/(0, _error.handleErrnoException)("FileSystem", "copyFile"), /*#__PURE__*/handleBadArgument("copyFile"));
  return (fromPath, toPath) => nodeCopyFile(fromPath, toPath);
})();
// == chmod
const chmod = /*#__PURE__*/(() => {
  const nodeChmod = /*#__PURE__*/(0, _Effectify.effectify)(NFS.chmod, /*#__PURE__*/(0, _error.handleErrnoException)("FileSystem", "chmod"), /*#__PURE__*/handleBadArgument("chmod"));
  return (path, mode) => nodeChmod(path, mode);
})();
// == chown
const chown = /*#__PURE__*/(() => {
  const nodeChown = /*#__PURE__*/(0, _Effectify.effectify)(NFS.chown, /*#__PURE__*/(0, _error.handleErrnoException)("FileSystem", "chown"), /*#__PURE__*/handleBadArgument("chown"));
  return (path, uid, gid) => nodeChown(path, uid, gid);
})();
// == link
const link = /*#__PURE__*/(() => {
  const nodeLink = /*#__PURE__*/(0, _Effectify.effectify)(NFS.link, /*#__PURE__*/(0, _error.handleErrnoException)("FileSystem", "link"), /*#__PURE__*/handleBadArgument("link"));
  return (existingPath, newPath) => nodeLink(existingPath, newPath);
})();
// == makeDirectory
const makeDirectory = /*#__PURE__*/(() => {
  const nodeMkdir = /*#__PURE__*/(0, _Effectify.effectify)(NFS.mkdir, /*#__PURE__*/(0, _error.handleErrnoException)("FileSystem", "makeDirectory"), /*#__PURE__*/handleBadArgument("makeDirectory"));
  return (path, options) => nodeMkdir(path, {
    recursive: options?.recursive ?? false,
    mode: options?.mode
  });
})();
// == makeTempDirectory
const makeTempDirectoryFactory = method => {
  const nodeMkdtemp = (0, _Effectify.effectify)(NFS.mkdtemp, (0, _error.handleErrnoException)("FileSystem", method), handleBadArgument(method));
  return options => Effect.suspend(() => {
    const prefix = options?.prefix ?? "";
    const directory = typeof options?.directory === "string" ? Path.join(options.directory, ".") : OS.tmpdir();
    return nodeMkdtemp(prefix ? Path.join(directory, prefix) : directory + "/");
  });
};
const makeTempDirectory = /*#__PURE__*/makeTempDirectoryFactory("makeTempDirectory");
// == remove
const removeFactory = method => {
  const nodeRm = (0, _Effectify.effectify)(NFS.rm, (0, _error.handleErrnoException)("FileSystem", method), handleBadArgument(method));
  return (path, options) => nodeRm(path, {
    recursive: options?.recursive ?? false,
    force: options?.force ?? false
  });
};
const remove = /*#__PURE__*/removeFactory("remove");
// == makeTempDirectoryScoped
const makeTempDirectoryScoped = /*#__PURE__*/(() => {
  const makeDirectory = /*#__PURE__*/makeTempDirectoryFactory("makeTempDirectoryScoped");
  const removeDirectory = /*#__PURE__*/removeFactory("makeTempDirectoryScoped");
  return options => Effect.acquireRelease(makeDirectory(options), directory => Effect.orDie(removeDirectory(directory, {
    recursive: true
  })));
})();
// == open
const openFactory = method => {
  const nodeOpen = (0, _Effectify.effectify)(NFS.open, (0, _error.handleErrnoException)("FileSystem", method), handleBadArgument(method));
  const nodeClose = (0, _Effectify.effectify)(NFS.close, (0, _error.handleErrnoException)("FileSystem", method), handleBadArgument(method));
  return (path, options) => (0, _Function.pipe)(Effect.acquireRelease(nodeOpen(path, options?.flag ?? "r", options?.mode), fd => Effect.orDie(nodeClose(fd))), Effect.map(fd => makeFile(FileSystem.FileDescriptor(fd), options?.flag?.startsWith("a") ?? false)));
};
const open = /*#__PURE__*/openFactory("open");
const makeFile = /*#__PURE__*/(() => {
  const nodeReadFactory = method => (0, _Effectify.effectify)(NFS.read, (0, _error.handleErrnoException)("FileSystem", method), handleBadArgument(method));
  const nodeRead = /*#__PURE__*/nodeReadFactory("read");
  const nodeReadAlloc = /*#__PURE__*/nodeReadFactory("readAlloc");
  const nodeStat = /*#__PURE__*/(0, _Effectify.effectify)(NFS.fstat, /*#__PURE__*/(0, _error.handleErrnoException)("FileSystem", "stat"), /*#__PURE__*/handleBadArgument("stat"));
  const nodeTruncate = /*#__PURE__*/(0, _Effectify.effectify)(NFS.ftruncate, /*#__PURE__*/(0, _error.handleErrnoException)("FileSystem", "truncate"), /*#__PURE__*/handleBadArgument("truncate"));
  const nodeWriteFactory = method => (0, _Effectify.effectify)(NFS.write, (0, _error.handleErrnoException)("FileSystem", method), handleBadArgument(method));
  const nodeWrite = /*#__PURE__*/nodeWriteFactory("write");
  const nodeWriteAll = /*#__PURE__*/nodeWriteFactory("writeAll");
  class FileImpl {
    fd;
    append;
    [FileSystem.FileTypeId];
    semaphore = /*#__PURE__*/Effect.unsafeMakeSemaphore(1);
    position = 0n;
    constructor(fd, append) {
      this.fd = fd;
      this.append = append;
      this[FileSystem.FileTypeId] = FileSystem.FileTypeId;
    }
    get stat() {
      return Effect.map(nodeStat(this.fd), makeFileInfo);
    }
    seek(offset, from) {
      const offsetSize = FileSystem.Size(offset);
      return this.semaphore.withPermits(1)(Effect.sync(() => {
        if (from === "start") {
          this.position = offsetSize;
        } else if (from === "current") {
          this.position = this.position + offsetSize;
        }
        return this.position;
      }));
    }
    read(buffer) {
      return this.semaphore.withPermits(1)(Effect.map(Effect.suspend(() => nodeRead(this.fd, {
        buffer,
        position: this.position
      })), bytesRead => {
        const sizeRead = FileSystem.Size(bytesRead);
        this.position = this.position + sizeRead;
        return sizeRead;
      }));
    }
    readAlloc(size) {
      const sizeNumber = Number(size);
      return this.semaphore.withPermits(1)(Effect.flatMap(Effect.sync(() => Buffer.allocUnsafeSlow(sizeNumber)), buffer => Effect.map(nodeReadAlloc(this.fd, {
        buffer,
        position: this.position
      }), bytesRead => {
        if (bytesRead === 0) {
          return Option.none();
        }
        this.position = this.position + BigInt(bytesRead);
        if (bytesRead === sizeNumber) {
          return Option.some(buffer);
        }
        const dst = Buffer.allocUnsafeSlow(bytesRead);
        buffer.copy(dst, 0, 0, bytesRead);
        return Option.some(dst);
      })));
    }
    truncate(length) {
      return this.semaphore.withPermits(1)(Effect.map(nodeTruncate(this.fd, length ? Number(length) : undefined), () => {
        if (!this.append) {
          const len = BigInt(length ?? 0);
          if (this.position > len) {
            this.position = len;
          }
        }
      }));
    }
    write(buffer) {
      return this.semaphore.withPermits(1)(Effect.map(Effect.suspend(() => nodeWrite(this.fd, buffer, undefined, undefined, this.append ? undefined : Number(this.position))), bytesWritten => {
        const sizeWritten = FileSystem.Size(bytesWritten);
        if (!this.append) {
          this.position = this.position + sizeWritten;
        }
        return sizeWritten;
      }));
    }
    writeAllChunk(buffer) {
      return Effect.flatMap(Effect.suspend(() => nodeWriteAll(this.fd, buffer, undefined, undefined, this.append ? undefined : Number(this.position))), bytesWritten => {
        if (bytesWritten === 0) {
          return Effect.fail(Error.SystemError({
            module: "FileSystem",
            method: "writeAll",
            reason: "WriteZero",
            pathOrDescriptor: this.fd,
            message: "write returned 0 bytes written"
          }));
        }
        if (!this.append) {
          this.position = this.position + BigInt(bytesWritten);
        }
        return bytesWritten < buffer.length ? this.writeAllChunk(buffer.subarray(bytesWritten)) : Effect.void;
      });
    }
    writeAll(buffer) {
      return this.semaphore.withPermits(1)(this.writeAllChunk(buffer));
    }
  }
  return (fd, append) => new FileImpl(fd, append);
})();
// == makeTempFile
const makeTempFileFactory = method => {
  const makeDirectory = makeTempDirectoryFactory(method);
  const open = openFactory(method);
  const randomHexString = bytes => Effect.sync(() => Crypto.randomBytes(bytes).toString("hex"));
  return options => (0, _Function.pipe)(Effect.zip(makeDirectory(options), randomHexString(6)), Effect.map(([directory, random]) => Path.join(directory, random)), Effect.tap(path => Effect.scoped(open(path, {
    flag: "w+"
  }))));
};
const makeTempFile = /*#__PURE__*/makeTempFileFactory("makeTempFile");
// == makeTempFileScoped
const makeTempFileScoped = /*#__PURE__*/(() => {
  const makeFile = /*#__PURE__*/makeTempFileFactory("makeTempFileScoped");
  const removeDirectory = /*#__PURE__*/removeFactory("makeTempFileScoped");
  return options => Effect.acquireRelease(makeFile(options), file => Effect.orDie(removeDirectory(Path.dirname(file), {
    recursive: true
  })));
})();
// == readDirectory
const readDirectory = (path, options) => Effect.tryPromise({
  try: () => NFS.promises.readdir(path, options),
  catch: err => (0, _error.handleErrnoException)("FileSystem", "readDirectory")(err, [path])
});
// == readFile
const readFile = path => Effect.async((resume, signal) => {
  try {
    NFS.readFile(path, {
      signal
    }, (err, data) => {
      if (err) {
        resume(Effect.fail((0, _error.handleErrnoException)("FileSystem", "readFile")(err, [path])));
      } else {
        resume(Effect.succeed(data));
      }
    });
  } catch (err) {
    resume(Effect.fail(handleBadArgument("readFile")(err)));
  }
});
// == readLink
const readLink = /*#__PURE__*/(() => {
  const nodeReadLink = /*#__PURE__*/(0, _Effectify.effectify)(NFS.readlink, /*#__PURE__*/(0, _error.handleErrnoException)("FileSystem", "readLink"), /*#__PURE__*/handleBadArgument("readLink"));
  return path => nodeReadLink(path);
})();
// == realPath
const realPath = /*#__PURE__*/(() => {
  const nodeRealPath = /*#__PURE__*/(0, _Effectify.effectify)(NFS.realpath, /*#__PURE__*/(0, _error.handleErrnoException)("FileSystem", "realPath"), /*#__PURE__*/handleBadArgument("realPath"));
  return path => nodeRealPath(path);
})();
// == rename
const rename = /*#__PURE__*/(() => {
  const nodeRename = /*#__PURE__*/(0, _Effectify.effectify)(NFS.rename, /*#__PURE__*/(0, _error.handleErrnoException)("FileSystem", "rename"), /*#__PURE__*/handleBadArgument("rename"));
  return (oldPath, newPath) => nodeRename(oldPath, newPath);
})();
// == stat
const makeFileInfo = stat => ({
  type: stat.isFile() ? "File" : stat.isDirectory() ? "Directory" : stat.isSymbolicLink() ? "SymbolicLink" : stat.isBlockDevice() ? "BlockDevice" : stat.isCharacterDevice() ? "CharacterDevice" : stat.isFIFO() ? "FIFO" : stat.isSocket() ? "Socket" : "Unknown",
  mtime: Option.fromNullable(stat.mtime),
  atime: Option.fromNullable(stat.atime),
  birthtime: Option.fromNullable(stat.birthtime),
  dev: stat.dev,
  rdev: Option.fromNullable(stat.rdev),
  ino: Option.fromNullable(stat.ino),
  mode: stat.mode,
  nlink: Option.fromNullable(stat.nlink),
  uid: Option.fromNullable(stat.uid),
  gid: Option.fromNullable(stat.gid),
  size: FileSystem.Size(stat.size),
  blksize: Option.fromNullable(FileSystem.Size(stat.blksize)),
  blocks: Option.fromNullable(stat.blocks)
});
const stat = /*#__PURE__*/(() => {
  const nodeStat = /*#__PURE__*/(0, _Effectify.effectify)(NFS.stat, /*#__PURE__*/(0, _error.handleErrnoException)("FileSystem", "stat"), /*#__PURE__*/handleBadArgument("stat"));
  return path => Effect.map(nodeStat(path), makeFileInfo);
})();
// == symlink
const symlink = /*#__PURE__*/(() => {
  const nodeSymlink = /*#__PURE__*/(0, _Effectify.effectify)(NFS.symlink, /*#__PURE__*/(0, _error.handleErrnoException)("FileSystem", "symlink"), /*#__PURE__*/handleBadArgument("symlink"));
  return (target, path) => nodeSymlink(target, path);
})();
// == truncate
const truncate = /*#__PURE__*/(() => {
  const nodeTruncate = /*#__PURE__*/(0, _Effectify.effectify)(NFS.truncate, /*#__PURE__*/(0, _error.handleErrnoException)("FileSystem", "truncate"), /*#__PURE__*/handleBadArgument("truncate"));
  return (path, length) => nodeTruncate(path, length !== undefined ? Number(length) : undefined);
})();
// == utimes
const utimes = /*#__PURE__*/(() => {
  const nodeUtimes = /*#__PURE__*/(0, _Effectify.effectify)(NFS.utimes, /*#__PURE__*/(0, _error.handleErrnoException)("FileSystem", "utime"), /*#__PURE__*/handleBadArgument("utime"));
  return (path, atime, mtime) => nodeUtimes(path, atime, mtime);
})();
// == watch
const watchNode = path => Stream.asyncScoped(emit => Effect.acquireRelease(Effect.sync(() => {
  const watcher = NFS.watch(path, {}, (event, path) => {
    if (!path) return;
    switch (event) {
      case "rename":
        {
          emit.fromEffect(Effect.match(stat(path), {
            onSuccess: _ => FileSystem.WatchEventCreate({
              path
            }),
            onFailure: _ => FileSystem.WatchEventRemove({
              path
            })
          }));
          return;
        }
      case "change":
        {
          emit.single(FileSystem.WatchEventUpdate({
            path
          }));
          return;
        }
    }
  });
  watcher.on("error", error => {
    emit.fail(Error.SystemError({
      module: "FileSystem",
      reason: "Unknown",
      method: "watch",
      pathOrDescriptor: path,
      message: error.message
    }));
  });
  watcher.on("close", () => {
    emit.end();
  });
  return watcher;
}), watcher => Effect.sync(() => watcher.close())));
const watch = (backend, path) => stat(path).pipe(Effect.map(stat => backend.pipe(Option.flatMap(_ => _.register(path, stat)), Option.getOrElse(() => watchNode(path)))), Stream.unwrap);
// == writeFile
const writeFile = (path, data, options) => Effect.async((resume, signal) => {
  try {
    NFS.writeFile(path, data, {
      signal,
      flag: options?.flag,
      mode: options?.mode
    }, err => {
      if (err) {
        resume(Effect.fail((0, _error.handleErrnoException)("FileSystem", "writeFile")(err, [path])));
      } else {
        resume(Effect.void);
      }
    });
  } catch (err) {
    resume(Effect.fail(handleBadArgument("writeFile")(err)));
  }
});
const makeFileSystem = /*#__PURE__*/Effect.map( /*#__PURE__*/Effect.serviceOption(FileSystem.WatchBackend), backend => FileSystem.make({
  access,
  chmod,
  chown,
  copy,
  copyFile,
  link,
  makeDirectory,
  makeTempDirectory,
  makeTempDirectoryScoped,
  makeTempFile,
  makeTempFileScoped,
  open,
  readDirectory,
  readFile,
  readLink,
  realPath,
  remove,
  rename,
  stat,
  symlink,
  truncate,
  utimes,
  watch(path) {
    return watch(backend, path);
  },
  writeFile
}));
/** @internal */
const layer = exports.layer = /*#__PURE__*/Layer.effect(FileSystem.FileSystem, makeFileSystem);
//# sourceMappingURL=fileSystem.js.map