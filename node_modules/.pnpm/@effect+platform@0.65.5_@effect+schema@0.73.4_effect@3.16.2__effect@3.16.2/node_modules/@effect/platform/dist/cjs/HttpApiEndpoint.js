"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setSuccess = exports.setPayload = exports.setPath = exports.setHeaders = exports.schemaSuccess = exports.put = exports.prefix = exports.post = exports.patch = exports.make = exports.isHttpApiEndpoint = exports.get = exports.del = exports.annotateMerge = exports.annotate = exports.addError = exports.TypeId = void 0;
var Schema = _interopRequireWildcard(require("@effect/schema/Schema"));
var Context = _interopRequireWildcard(require("effect/Context"));
var _Function = require("effect/Function");
var Option = _interopRequireWildcard(require("effect/Option"));
var _Pipeable = require("effect/Pipeable");
var Predicate = _interopRequireWildcard(require("effect/Predicate"));
var HttpApiSchema = _interopRequireWildcard(require("./HttpApiSchema.js"));
var HttpRouter = _interopRequireWildcard(require("./HttpRouter.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @since 1.0.0
 */

/**
 * @since 1.0.0
 * @category type ids
 */
const TypeId = exports.TypeId = /*#__PURE__*/Symbol.for("@effect/platform/HttpApiEndpoint");
/**
 * @since 1.0.0
 * @category guards
 */
const isHttpApiEndpoint = u => Predicate.hasProperty(u, TypeId);
exports.isHttpApiEndpoint = isHttpApiEndpoint;
const Proto = {
  [TypeId]: TypeId,
  pipe() {
    return (0, _Pipeable.pipeArguments)(this, arguments);
  }
};
const makeProto = options => Object.assign(Object.create(Proto), options);
/**
 * @since 1.0.0
 * @category constructors
 */
const make = method => (name, path) => makeProto({
  name,
  path,
  method,
  pathSchema: Option.none(),
  payloadSchema: Option.none(),
  headersSchema: Option.none(),
  successSchema: HttpApiSchema.NoContent,
  errorSchema: Schema.Never,
  annotations: Context.empty()
});
/**
 * @since 1.0.0
 * @category constructors
 */
exports.make = make;
const get = exports.get = /*#__PURE__*/make("GET");
/**
 * @since 1.0.0
 * @category constructors
 */
const post = exports.post = /*#__PURE__*/make("POST");
/**
 * @since 1.0.0
 * @category constructors
 */
const put = exports.put = /*#__PURE__*/make("PUT");
/**
 * @since 1.0.0
 * @category constructors
 */
const patch = exports.patch = /*#__PURE__*/make("PATCH");
/**
 * @since 1.0.0
 * @category constructors
 */
const del = exports.del = /*#__PURE__*/make("DELETE");
/**
 * Set the schema for the success response of the endpoint. The status code
 * will be inferred from the schema, otherwise it will default to 200.
 *
 * @since 1.0.0
 * @category result
 */
const setSuccess = exports.setSuccess = /*#__PURE__*/(0, _Function.dual)(args => isHttpApiEndpoint(args[0]), (self, schema, annotations) => makeProto({
  ...self,
  successSchema: schema.annotations(HttpApiSchema.annotations({
    status: annotations?.status ?? HttpApiSchema.getStatusSuccess(schema)
  }))
}));
/**
 * Add an error response schema to the endpoint. The status code
 * will be inferred from the schema, otherwise it will default to 500.
 *
 * @since 1.0.0
 * @category result
 */
const addError = exports.addError = /*#__PURE__*/(0, _Function.dual)(args => isHttpApiEndpoint(args[0]), (self, schema, annotations) => makeProto({
  ...self,
  errorSchema: HttpApiSchema.UnionUnify(self.errorSchema, schema.pipe(Schema.annotations(HttpApiSchema.annotations({
    status: annotations?.status ?? HttpApiSchema.getStatusError(schema)
  }))))
}));
/**
 * Set the schema for the request body of the endpoint. The schema will be
 * used to validate the request body before the handler is called.
 *
 * For endpoints with no request body, the payload will use the url search
 * parameters.
 *
 * You can set a multipart schema to handle file uploads by using the
 * `HttpApiSchema.Multipart` combinator.
 *
 * @since 1.0.0
 * @category request
 */
const setPayload = exports.setPayload = /*#__PURE__*/(0, _Function.dual)(2, (self, schema) => makeProto({
  ...self,
  payloadSchema: Option.some(schema)
}));
/**
 * Set the schema for the path parameters of the endpoint. The schema will be
 * used to validate the path parameters before the handler is called.
 *
 * @since 1.0.0
 * @category request
 */
const setPath = exports.setPath = /*#__PURE__*/(0, _Function.dual)(2, (self, schema) => makeProto({
  ...self,
  pathSchema: Option.some(schema)
}));
/**
 * Set the schema for the headers of the endpoint. The schema will be
 * used to validate the headers before the handler is called.
 *
 * @since 1.0.0
 * @category request
 */
const setHeaders = exports.setHeaders = /*#__PURE__*/(0, _Function.dual)(2, (self, schema) => makeProto({
  ...self,
  headersSchema: Option.some(schema)
}));
/**
 * Add a prefix to the path of the endpoint.
 *
 * @since 1.0.0
 * @category request
 */
const prefix = exports.prefix = /*#__PURE__*/(0, _Function.dual)(2, (self, prefix) => makeProto({
  ...self,
  path: HttpRouter.prefixPath(self.path, prefix)
}));
/**
 * @since 1.0.0
 * @category reflection
 */
const schemaSuccess = self => HttpApiSchema.isVoid(self.successSchema.ast) ? Option.none() : Option.some(self.successSchema);
/**
 * Merge the annotations of the endpoint with the provided context.
 *
 * @since 1.0.0
 * @category annotations
 */
exports.schemaSuccess = schemaSuccess;
const annotateMerge = exports.annotateMerge = /*#__PURE__*/(0, _Function.dual)(2, (self, context) => makeProto({
  ...self,
  annotations: Context.merge(self.annotations, context)
}));
/**
 * Add an annotation to the endpoint.
 *
 * @since 1.0.0
 * @category annotations
 */
const annotate = exports.annotate = /*#__PURE__*/(0, _Function.dual)(3, (self, tag, value) => makeProto({
  ...self,
  annotations: Context.add(self.annotations, tag, value)
}));
//# sourceMappingURL=HttpApiEndpoint.js.map