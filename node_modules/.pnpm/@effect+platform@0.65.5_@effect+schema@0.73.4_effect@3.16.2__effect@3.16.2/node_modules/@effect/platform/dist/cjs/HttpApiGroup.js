"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prefix = exports.make = exports.isHttpApiGroup = exports.annotateMerge = exports.annotateEndpointsMerge = exports.annotateEndpoints = exports.annotate = exports.addError = exports.add = exports.TypeId = void 0;
var Schema = _interopRequireWildcard(require("@effect/schema/Schema"));
var Chunk = _interopRequireWildcard(require("effect/Chunk"));
var Context = _interopRequireWildcard(require("effect/Context"));
var _Function = require("effect/Function");
var _Pipeable = require("effect/Pipeable");
var Predicate = _interopRequireWildcard(require("effect/Predicate"));
var HttpApiEndpoint = _interopRequireWildcard(require("./HttpApiEndpoint.js"));
var HttpApiSchema = _interopRequireWildcard(require("./HttpApiSchema.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @since 1.0.0
 */

/**
 * @since 1.0.0
 * @category type ids
 */
const TypeId = exports.TypeId = /*#__PURE__*/Symbol.for("@effect/platform/HttpApiGroup");
/**
 * @since 1.0.0
 * @category guards
 */
const isHttpApiGroup = u => Predicate.hasProperty(u, TypeId);
exports.isHttpApiGroup = isHttpApiGroup;
const Proto = {
  [TypeId]: TypeId,
  pipe() {
    return (0, _Pipeable.pipeArguments)(this, arguments);
  }
};
const makeProto = options => {
  function HttpApiGroup() {}
  Object.setPrototypeOf(HttpApiGroup, Proto);
  return Object.assign(HttpApiGroup, options);
};
/**
 * An `HttpApiGroup` is a collection of `HttpApiEndpoint`s. You can use an `HttpApiGroup` to
 * represent a portion of your domain.
 *
 * The endpoints can be implemented later using the `HttpApiBuilder.group` api.
 *
 * @since 1.0.0
 * @category constructors
 */
const make = identifier => makeProto({
  identifier,
  endpoints: Chunk.empty(),
  errorSchema: Schema.Never,
  annotations: Context.empty()
});
/**
 * Add an `HttpApiEndpoint` to an `HttpApiGroup`.
 *
 * @since 1.0.0
 * @category endpoints
 */
exports.make = make;
const add = exports.add = /*#__PURE__*/(0, _Function.dual)(2, (self, endpoint) => makeProto({
  identifier: self.identifier,
  errorSchema: self.errorSchema,
  annotations: self.annotations,
  endpoints: Chunk.append(self.endpoints, endpoint)
}));
/**
 * Add an error schema to an `HttpApiGroup`, which is shared by all endpoints in the
 * group.
 *
 * @since 1.0.0
 * @category errors
 */
const addError = exports.addError = /*#__PURE__*/(0, _Function.dual)(args => isHttpApiGroup(args[0]), (self, schema, annotations) => makeProto({
  identifier: self.identifier,
  annotations: self.annotations,
  endpoints: self.endpoints,
  errorSchema: HttpApiSchema.UnionUnify(self.errorSchema, schema.annotations(HttpApiSchema.annotations({
    status: annotations?.status ?? HttpApiSchema.getStatusError(schema)
  })))
}));
/**
 * Add a path prefix to all endpoints in an `HttpApiGroup`. Note that this will only
 * add the prefix to the endpoints before this api is called.
 *
 * @since 1.0.0
 * @category endpoints
 */
const prefix = exports.prefix = /*#__PURE__*/(0, _Function.dual)(2, (self, prefix) => makeProto({
  identifier: self.identifier,
  errorSchema: self.errorSchema,
  annotations: self.annotations,
  endpoints: Chunk.map(self.endpoints, HttpApiEndpoint.prefix(prefix))
}));
/**
 * Merge the annotations of an `HttpApiGroup` with a new context.
 *
 * @since 1.0.0
 * @category annotations
 */
const annotateMerge = exports.annotateMerge = /*#__PURE__*/(0, _Function.dual)(2, (self, context) => makeProto({
  ...self,
  annotations: Context.merge(self.annotations, context)
}));
/**
 * Add an annotation to an `HttpApiGroup`.
 *
 * @since 1.0.0
 * @category annotations
 */
const annotate = exports.annotate = /*#__PURE__*/(0, _Function.dual)(3, (self, tag, value) => makeProto({
  identifier: self.identifier,
  errorSchema: self.errorSchema,
  endpoints: self.endpoints,
  annotations: Context.add(self.annotations, tag, value)
}));
/**
 * For each endpoint in an `HttpApiGroup`, update the annotations with a new
 * context.
 *
 * Note that this will only update the annotations before this api is called.
 *
 * @since 1.0.0
 * @category annotations
 */
const annotateEndpointsMerge = exports.annotateEndpointsMerge = /*#__PURE__*/(0, _Function.dual)(2, (self, context) => makeProto({
  identifier: self.identifier,
  errorSchema: self.errorSchema,
  annotations: self.annotations,
  endpoints: Chunk.map(self.endpoints, HttpApiEndpoint.annotateMerge(context))
}));
/**
 * For each endpoint in an `HttpApiGroup`, add an annotation.
 *
 * Note that this will only add the annotation to the endpoints before this api
 * is called.
 *
 * @since 1.0.0
 * @category annotations
 */
const annotateEndpoints = exports.annotateEndpoints = /*#__PURE__*/(0, _Function.dual)(3, (self, tag, value) => makeProto({
  identifier: self.identifier,
  errorSchema: self.errorSchema,
  annotations: self.annotations,
  endpoints: Chunk.map(self.endpoints, HttpApiEndpoint.annotate(tag, value))
}));
//# sourceMappingURL=HttpApiGroup.js.map