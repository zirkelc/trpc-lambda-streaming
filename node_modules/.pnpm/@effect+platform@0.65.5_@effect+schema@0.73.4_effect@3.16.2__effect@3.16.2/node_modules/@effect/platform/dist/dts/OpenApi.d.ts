import * as JSONSchema from "@effect/schema/JSONSchema";
import * as Context from "effect/Context";
import type { ReadonlyRecord } from "effect/Record";
import * as HttpApi from "./HttpApi.js";
import type { HttpApiSecurity } from "./HttpApiSecurity.js";
declare const Identifier_base: Context.TagClass<Identifier, "@effect/platform/OpenApi/Identifier", string>;
/**
 * @since 1.0.0
 * @category annotations
 */
export declare class Identifier extends Identifier_base {
}
declare const Title_base: Context.TagClass<Title, "@effect/platform/OpenApi/Title", string>;
/**
 * @since 1.0.0
 * @category annotations
 */
export declare class Title extends Title_base {
}
declare const Version_base: Context.TagClass<Version, "@effect/platform/OpenApi/Version", string>;
/**
 * @since 1.0.0
 * @category annotations
 */
export declare class Version extends Version_base {
}
declare const Description_base: Context.TagClass<Description, "@effect/platform/OpenApi/Description", string>;
/**
 * @since 1.0.0
 * @category annotations
 */
export declare class Description extends Description_base {
}
declare const License_base: Context.TagClass<License, "@effect/platform/OpenApi/License", OpenAPISpecLicense>;
/**
 * @since 1.0.0
 * @category annotations
 */
export declare class License extends License_base {
}
declare const Security_base: Context.TagClass<Security, "@effect/platform/OpenApi/Security", HttpApiSecurity>;
/**
 * @since 1.0.0
 * @category annotations
 */
export declare class Security extends Security_base {
}
declare const ExternalDocs_base: Context.TagClass<ExternalDocs, "@effect/platform/OpenApi/ExternalDocs", OpenAPISpecExternalDocs>;
/**
 * @since 1.0.0
 * @category annotations
 */
export declare class ExternalDocs extends ExternalDocs_base {
}
/**
 * @since 1.0.0
 * @category annotations
 */
export declare const annotations: (annotations: {
    readonly identifier?: string | undefined;
    readonly title?: string | undefined;
    readonly description?: string | undefined;
    readonly version?: string | undefined;
    readonly license?: OpenAPISpecLicense | undefined;
    readonly security?: HttpApiSecurity | undefined;
    readonly externalDocs?: OpenAPISpecExternalDocs | undefined;
}) => Context.Context<never>;
/**
 * @since 1.0.0
 * @category annotations
 */
export interface Annotatable {
    readonly annotations: Context.Context<never>;
}
/**
 * @since 1.0.0
 * @category annotations
 */
export declare const annotate: {
    (annotations: {
        readonly identifier?: string | undefined;
        readonly title?: string | undefined;
        readonly description?: string | undefined;
        readonly version?: string | undefined;
        readonly license?: OpenAPISpecLicense | undefined;
        readonly security?: HttpApiSecurity | undefined;
        readonly externalDocs?: OpenAPISpecExternalDocs | undefined;
    }): <A extends Annotatable>(self: A) => A;
    <A extends Annotatable>(self: A, annotations: {
        readonly identifier?: string | undefined;
        readonly title?: string | undefined;
        readonly description?: string | undefined;
        readonly version?: string | undefined;
        readonly license?: OpenAPISpecLicense | undefined;
        readonly security?: HttpApiSecurity | undefined;
        readonly externalDocs?: OpenAPISpecExternalDocs | undefined;
    }): A;
};
/**
 * @category constructors
 * @since 1.0.0
 */
export declare const fromApi: <A extends HttpApi.HttpApi.Any>(api: A) => OpenAPISpec;
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenAPISpec {
    readonly openapi: "3.0.3";
    readonly info: OpenAPISpecInfo;
    readonly servers?: Array<OpenAPISpecServer>;
    readonly paths: OpenAPISpecPaths;
    readonly components?: OpenAPIComponents;
    readonly security?: Array<OpenAPISecurityRequirement>;
    readonly tags?: Array<OpenAPISpecTag>;
    readonly externalDocs?: OpenAPISpecExternalDocs;
}
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenAPISpecInfo {
    readonly title: string;
    readonly version: string;
    readonly description?: string;
    readonly license?: OpenAPISpecLicense;
}
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenAPISpecTag {
    readonly name: string;
    readonly description?: string;
    readonly externalDocs?: OpenAPISpecExternalDocs;
}
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenAPISpecExternalDocs {
    readonly url: string;
    readonly description?: string;
}
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenAPISpecLicense {
    readonly name: string;
    readonly url?: string;
}
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenAPISpecServer {
    readonly url: string;
    readonly description?: string;
    readonly variables?: Record<string, OpenAPISpecServerVariable>;
}
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenAPISpecServerVariable {
    readonly default: string;
    readonly enum?: [string, ...Array<string>];
    readonly description?: string;
}
/**
 * @category models
 * @since 1.0.0
 */
export type OpenAPISpecPaths = ReadonlyRecord<string, OpenAPISpecPathItem>;
/**
 * @category models
 * @since 1.0.0
 */
export type OpenAPISpecMethodName = "get" | "put" | "post" | "delete" | "options" | "head" | "patch" | "trace";
/**
 * @category models
 * @since 1.0.0
 */
export type OpenAPISpecPathItem = {
    readonly [K in OpenAPISpecMethodName]?: OpenAPISpecOperation;
} & {
    readonly summary?: string;
    readonly description?: string;
    readonly parameters?: Array<OpenAPISpecParameter>;
};
/**
 * @category models
 * @since 1.0.0
 */
export type OpenAPIJSONSchema = JSONSchema.JsonSchema7;
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenAPISpecParameter {
    readonly name: string;
    readonly in: "query" | "header" | "path" | "cookie";
    readonly schema: OpenAPIJSONSchema;
    readonly description?: string;
    readonly required?: boolean;
    readonly deprecated?: boolean;
    readonly allowEmptyValue?: boolean;
}
/**
 * @category models
 * @since 1.0.0
 */
export type OpenAPISpecResponses = Record<number, OpenApiSpecResponse>;
/**
 * @category models
 * @since 1.0.0
 */
export type OpenApiSpecContentType = "application/json" | "application/xml" | "multipart/form-data" | "text/plain";
/**
 * @category models
 * @since 1.0.0
 */
export type OpenApiSpecContent = {
    readonly [K in OpenApiSpecContentType]?: OpenApiSpecMediaType;
};
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenApiSpecResponseHeader {
    readonly description?: string;
    readonly schema: OpenAPIJSONSchema;
}
/**
 * @category models
 * @since 1.0.0
 */
export type OpenApiSpecResponseHeaders = ReadonlyRecord<string, OpenApiSpecResponseHeader>;
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenApiSpecResponse {
    readonly content?: OpenApiSpecContent;
    readonly headers?: OpenApiSpecResponseHeaders;
    readonly description: string;
}
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenApiSpecMediaType {
    readonly schema?: OpenAPIJSONSchema;
    readonly example?: object;
    readonly description?: string;
}
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenAPISpecRequestBody {
    readonly content: OpenApiSpecContent;
    readonly description?: string;
    readonly required?: boolean;
}
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenAPIComponents {
    readonly schemas?: ReadonlyRecord<string, OpenAPIJSONSchema>;
    readonly securitySchemes?: ReadonlyRecord<string, OpenAPISecurityScheme>;
}
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenAPIHTTPSecurityScheme {
    readonly type: "http";
    readonly description?: string;
    readonly scheme: "bearer" | "basic" | string;
    readonly bearerFormat?: string;
}
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenAPIApiKeySecurityScheme {
    readonly type: "apiKey";
    readonly description?: string;
    readonly name: string;
    readonly in: "query" | "header" | "cookie";
}
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenAPIMutualTLSSecurityScheme {
    readonly type: "mutualTLS";
    readonly description?: string;
}
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenAPIOAuth2SecurityScheme {
    readonly type: "oauth2";
    readonly description?: string;
    readonly flows: ReadonlyRecord<"implicit" | "password" | "clientCredentials" | "authorizationCode", ReadonlyRecord<string, unknown>>;
}
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenAPIOpenIdConnectSecurityScheme {
    readonly type: "openIdConnect";
    readonly description?: string;
    readonly openIdConnectUrl: string;
}
/**
 * @category models
 * @since 1.0.0
 */
export type OpenAPISecurityScheme = OpenAPIHTTPSecurityScheme | OpenAPIApiKeySecurityScheme | OpenAPIMutualTLSSecurityScheme | OpenAPIOAuth2SecurityScheme | OpenAPIOpenIdConnectSecurityScheme;
/**
 * @category models
 * @since 1.0.0
 */
export type OpenAPISecurityRequirement = ReadonlyRecord<string, Array<string>>;
/**
 * @category models
 * @since 1.0.0
 */
export interface OpenAPISpecOperation {
    readonly requestBody?: OpenAPISpecRequestBody;
    readonly responses?: OpenAPISpecResponses;
    readonly operationId?: string;
    readonly description?: string;
    readonly parameters?: Array<OpenAPISpecParameter>;
    readonly summary?: string;
    readonly deprecated?: boolean;
    readonly tags?: Array<string>;
    readonly security?: Array<OpenAPISecurityRequirement>;
    readonly externalDocs?: OpenAPISpecExternalDocs;
}
export {};
//# sourceMappingURL=OpenApi.d.ts.map