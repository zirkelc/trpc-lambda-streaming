/**
 * @since 1.0.0
 */
import * as Schema from "@effect/schema/Schema";
import * as Context from "effect/Context";
import { dual } from "effect/Function";
import * as Option from "effect/Option";
import { pipeArguments } from "effect/Pipeable";
import * as Predicate from "effect/Predicate";
import * as HttpApiSchema from "./HttpApiSchema.js";
import * as HttpRouter from "./HttpRouter.js";
/**
 * @since 1.0.0
 * @category type ids
 */
export const TypeId = /*#__PURE__*/Symbol.for("@effect/platform/HttpApiEndpoint");
/**
 * @since 1.0.0
 * @category guards
 */
export const isHttpApiEndpoint = u => Predicate.hasProperty(u, TypeId);
const Proto = {
  [TypeId]: TypeId,
  pipe() {
    return pipeArguments(this, arguments);
  }
};
const makeProto = options => Object.assign(Object.create(Proto), options);
/**
 * @since 1.0.0
 * @category constructors
 */
export const make = method => (name, path) => makeProto({
  name,
  path,
  method,
  pathSchema: Option.none(),
  payloadSchema: Option.none(),
  headersSchema: Option.none(),
  successSchema: HttpApiSchema.NoContent,
  errorSchema: Schema.Never,
  annotations: Context.empty()
});
/**
 * @since 1.0.0
 * @category constructors
 */
export const get = /*#__PURE__*/make("GET");
/**
 * @since 1.0.0
 * @category constructors
 */
export const post = /*#__PURE__*/make("POST");
/**
 * @since 1.0.0
 * @category constructors
 */
export const put = /*#__PURE__*/make("PUT");
/**
 * @since 1.0.0
 * @category constructors
 */
export const patch = /*#__PURE__*/make("PATCH");
/**
 * @since 1.0.0
 * @category constructors
 */
export const del = /*#__PURE__*/make("DELETE");
/**
 * Set the schema for the success response of the endpoint. The status code
 * will be inferred from the schema, otherwise it will default to 200.
 *
 * @since 1.0.0
 * @category result
 */
export const setSuccess = /*#__PURE__*/dual(args => isHttpApiEndpoint(args[0]), (self, schema, annotations) => makeProto({
  ...self,
  successSchema: schema.annotations(HttpApiSchema.annotations({
    status: annotations?.status ?? HttpApiSchema.getStatusSuccess(schema)
  }))
}));
/**
 * Add an error response schema to the endpoint. The status code
 * will be inferred from the schema, otherwise it will default to 500.
 *
 * @since 1.0.0
 * @category result
 */
export const addError = /*#__PURE__*/dual(args => isHttpApiEndpoint(args[0]), (self, schema, annotations) => makeProto({
  ...self,
  errorSchema: HttpApiSchema.UnionUnify(self.errorSchema, schema.pipe(Schema.annotations(HttpApiSchema.annotations({
    status: annotations?.status ?? HttpApiSchema.getStatusError(schema)
  }))))
}));
/**
 * Set the schema for the request body of the endpoint. The schema will be
 * used to validate the request body before the handler is called.
 *
 * For endpoints with no request body, the payload will use the url search
 * parameters.
 *
 * You can set a multipart schema to handle file uploads by using the
 * `HttpApiSchema.Multipart` combinator.
 *
 * @since 1.0.0
 * @category request
 */
export const setPayload = /*#__PURE__*/dual(2, (self, schema) => makeProto({
  ...self,
  payloadSchema: Option.some(schema)
}));
/**
 * Set the schema for the path parameters of the endpoint. The schema will be
 * used to validate the path parameters before the handler is called.
 *
 * @since 1.0.0
 * @category request
 */
export const setPath = /*#__PURE__*/dual(2, (self, schema) => makeProto({
  ...self,
  pathSchema: Option.some(schema)
}));
/**
 * Set the schema for the headers of the endpoint. The schema will be
 * used to validate the headers before the handler is called.
 *
 * @since 1.0.0
 * @category request
 */
export const setHeaders = /*#__PURE__*/dual(2, (self, schema) => makeProto({
  ...self,
  headersSchema: Option.some(schema)
}));
/**
 * Add a prefix to the path of the endpoint.
 *
 * @since 1.0.0
 * @category request
 */
export const prefix = /*#__PURE__*/dual(2, (self, prefix) => makeProto({
  ...self,
  path: HttpRouter.prefixPath(self.path, prefix)
}));
/**
 * @since 1.0.0
 * @category reflection
 */
export const schemaSuccess = self => HttpApiSchema.isVoid(self.successSchema.ast) ? Option.none() : Option.some(self.successSchema);
/**
 * Merge the annotations of the endpoint with the provided context.
 *
 * @since 1.0.0
 * @category annotations
 */
export const annotateMerge = /*#__PURE__*/dual(2, (self, context) => makeProto({
  ...self,
  annotations: Context.merge(self.annotations, context)
}));
/**
 * Add an annotation to the endpoint.
 *
 * @since 1.0.0
 * @category annotations
 */
export const annotate = /*#__PURE__*/dual(3, (self, tag, value) => makeProto({
  ...self,
  annotations: Context.add(self.annotations, tag, value)
}));
//# sourceMappingURL=HttpApiEndpoint.js.map