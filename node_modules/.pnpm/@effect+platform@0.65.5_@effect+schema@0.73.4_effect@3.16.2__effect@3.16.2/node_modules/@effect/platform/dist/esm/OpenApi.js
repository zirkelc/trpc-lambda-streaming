/**
 * @since 1.0.0
 */
import * as AST from "@effect/schema/AST";
import * as JSONSchema from "@effect/schema/JSONSchema";
import * as Schema from "@effect/schema/Schema";
import * as Context from "effect/Context";
import { dual } from "effect/Function";
import * as Option from "effect/Option";
import * as HttpApi from "./HttpApi.js";
import * as HttpApiSchema from "./HttpApiSchema.js";
import * as HttpMethod from "./HttpMethod.js";
/**
 * @since 1.0.0
 * @category annotations
 */
export class Identifier extends /*#__PURE__*/Context.Tag("@effect/platform/OpenApi/Identifier")() {}
/**
 * @since 1.0.0
 * @category annotations
 */
export class Title extends /*#__PURE__*/Context.Tag("@effect/platform/OpenApi/Title")() {}
/**
 * @since 1.0.0
 * @category annotations
 */
export class Version extends /*#__PURE__*/Context.Tag("@effect/platform/OpenApi/Version")() {}
/**
 * @since 1.0.0
 * @category annotations
 */
export class Description extends /*#__PURE__*/Context.Tag("@effect/platform/OpenApi/Description")() {}
/**
 * @since 1.0.0
 * @category annotations
 */
export class License extends /*#__PURE__*/Context.Tag("@effect/platform/OpenApi/License")() {}
/**
 * @since 1.0.0
 * @category annotations
 */
export class Security extends /*#__PURE__*/Context.Tag("@effect/platform/OpenApi/Security")() {}
/**
 * @since 1.0.0
 * @category annotations
 */
export class ExternalDocs extends /*#__PURE__*/Context.Tag("@effect/platform/OpenApi/ExternalDocs")() {}
/**
 * @since 1.0.0
 * @category annotations
 */
export const annotations = annotations => {
  let context = Context.empty();
  if (annotations.identifier !== undefined) {
    context = Context.add(context, Identifier, annotations.identifier);
  }
  if (annotations.title !== undefined) {
    context = Context.add(context, Title, annotations.title);
  }
  if (annotations.description !== undefined) {
    context = Context.add(context, Description, annotations.description);
  }
  if (annotations.version !== undefined) {
    context = Context.add(context, Version, annotations.version);
  }
  if (annotations.license !== undefined) {
    context = Context.add(context, License, annotations.license);
  }
  if (annotations.security !== undefined) {
    context = Context.add(context, Security, annotations.security);
  }
  if (annotations.externalDocs !== undefined) {
    context = Context.add(context, ExternalDocs, annotations.externalDocs);
  }
  return context;
};
/**
 * @since 1.0.0
 * @category annotations
 */
export const annotate = /*#__PURE__*/dual(2, (self, annotations_) => {
  const base = typeof self === "function" ? function () {} : self;
  Object.setPrototypeOf(base, Object.getPrototypeOf(self));
  const context = Context.merge(self.annotations, annotations(annotations_));
  return Object.assign(base, self, {
    annotations: context
  });
});
/**
 * @category constructors
 * @since 1.0.0
 */
export const fromApi = api => {
  const spec = {
    openapi: "3.0.3",
    info: {
      title: Context.getOrElse(api.annotations, Title, () => "Api"),
      version: Context.getOrElse(api.annotations, Version, () => "0.0.1")
    },
    paths: {},
    tags: [],
    components: {
      schemas: {},
      securitySchemes: {}
    },
    security: []
  };
  const securityMap = new Map();
  let securityCount = 0;
  function registerSecurity(security) {
    if (securityMap.has(security)) {
      return securityMap.get(security);
    }
    const count = securityCount++;
    const id = `${security._tag}${count === 0 ? "" : count}`;
    const scheme = makeSecurityScheme(security);
    spec.components.securitySchemes[id] = scheme;
    securityMap.set(security, id);
    return id;
  }
  Option.map(Context.getOption(api.annotations, Description), description => {
    spec.info.description = description;
  });
  Option.map(Context.getOption(api.annotations, License), license => {
    spec.info.license = license;
  });
  Option.map(Context.getOption(api.annotations, Security), apiSecurity => {
    spec.security.push({
      [registerSecurity(apiSecurity)]: []
    });
  });
  HttpApi.reflect(api, {
    onGroup({
      group
    }) {
      const tag = {
        name: Context.getOrElse(group.annotations, Title, () => group.identifier)
      };
      Option.map(Context.getOption(group.annotations, Description), description => {
        tag.description = description;
      });
      Option.map(Context.getOption(group.annotations, ExternalDocs), externalDocs => {
        tag.externalDocs = externalDocs;
      });
      spec.tags.push(tag);
    },
    onEndpoint({
      endpoint,
      errors,
      group,
      mergedAnnotations,
      successAST,
      successEncoding,
      successStatus
    }) {
      const path = endpoint.path.replace(/:(\w+)[^/]*/g, "{$1}");
      const method = endpoint.method.toLowerCase();
      const op = {
        tags: [Context.getOrElse(group.annotations, Title, () => group.identifier)],
        operationId: Context.getOrElse(endpoint.annotations, Identifier, () => `${group.identifier}.${endpoint.name}`),
        parameters: [],
        security: [],
        responses: {
          [successStatus]: {
            description: Option.getOrElse(getDescriptionOrIdentifier(successAST), () => "Success")
          }
        }
      };
      Option.map(Context.getOption(endpoint.annotations, Description), description => {
        op.description = description;
      });
      Option.map(Context.getOption(endpoint.annotations, ExternalDocs), externalDocs => {
        op.externalDocs = externalDocs;
      });
      Option.map(Context.getOption(mergedAnnotations, Security), apiSecurity => {
        op.security.push({
          [registerSecurity(apiSecurity)]: []
        });
      });
      endpoint.payloadSchema.pipe(Option.filter(() => HttpMethod.hasBody(endpoint.method)), Option.map(schema => {
        op.requestBody = {
          content: {
            [HttpApiSchema.getMultipart(schema.ast) ? "multipart/form-data" : "application/json"]: {
              schema: makeJsonSchema(schema)
            }
          },
          required: true
        };
      }));
      successAST.pipe(Option.map(ast => {
        op.responses[successStatus].content = {
          [successEncoding.contentType]: {
            schema: makeJsonSchema(Schema.make(ast))
          }
        };
      }));
      if (Option.isSome(endpoint.pathSchema)) {
        const schema = makeJsonSchema(endpoint.pathSchema.value);
        if ("properties" in schema) {
          Object.entries(schema.properties).forEach(([name, jsonSchema]) => {
            op.parameters.push({
              name,
              in: "path",
              schema: jsonSchema,
              required: schema.required.includes(name)
            });
          });
        }
      }
      if (!HttpMethod.hasBody(endpoint.method) && Option.isSome(endpoint.payloadSchema)) {
        const schema = makeJsonSchema(endpoint.payloadSchema.value);
        if ("properties" in schema) {
          Object.entries(schema.properties).forEach(([name, jsonSchema]) => {
            op.parameters.push({
              name,
              in: "query",
              schema: jsonSchema,
              required: schema.required.includes(name)
            });
          });
        }
      }
      if (Option.isSome(endpoint.headersSchema)) {
        const schema = makeJsonSchema(endpoint.headersSchema.value);
        if ("properties" in schema) {
          Object.entries(schema.properties).forEach(([name, jsonSchema]) => {
            op.parameters.push({
              name,
              in: "header",
              schema: jsonSchema,
              required: schema.required.includes(name)
            });
          });
        }
      }
      for (const [status, ast] of errors) {
        if (op.responses[status]) continue;
        op.responses[status] = {
          description: Option.getOrElse(getDescriptionOrIdentifier(ast), () => "Error")
        };
        ast.pipe(Option.filter(ast => !HttpApiSchema.getEmptyDecodeable(ast)), Option.map(ast => {
          op.responses[status].content = {
            "application/json": {
              schema: makeJsonSchema(Schema.make(ast))
            }
          };
        }));
      }
      if (!spec.paths[path]) {
        spec.paths[path] = {};
      }
      spec.paths[path][method] = op;
    }
  });
  return spec;
};
const makeSecurityScheme = security => {
  const meta = {};
  Option.map(Context.getOption(security.annotations, Description), description => {
    meta.description = description;
  });
  switch (security._tag) {
    case "Basic":
      {
        return {
          ...meta,
          type: "http",
          scheme: "basic"
        };
      }
    case "Bearer":
      {
        return {
          ...meta,
          type: "http",
          scheme: "bearer"
        };
      }
    case "ApiKey":
      {
        return {
          ...meta,
          type: "apiKey",
          name: security.key,
          in: security.in
        };
      }
  }
};
const getDescriptionOrIdentifier = ast => ast.pipe(Option.map(ast => "to" in ast ? {
  ...ast.to.annotations,
  ...ast.annotations
} : ast.annotations), Option.flatMapNullable(annotations => annotations[AST.DescriptionAnnotationId] ?? annotations[AST.IdentifierAnnotationId]));
const makeJsonSchema = schema => {
  const jsonSchema = JSONSchema.make(schema);
  delete jsonSchema.$schema;
  return jsonSchema;
};
//# sourceMappingURL=OpenApi.js.map