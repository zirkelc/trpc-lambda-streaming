/**
 * @since 1.0.0
 */
import * as Schema from "@effect/schema/Schema";
import * as Chunk from "effect/Chunk";
import * as Context from "effect/Context";
import { dual } from "effect/Function";
import { pipeArguments } from "effect/Pipeable";
import * as Predicate from "effect/Predicate";
import * as HttpApiEndpoint from "./HttpApiEndpoint.js";
import * as HttpApiSchema from "./HttpApiSchema.js";
/**
 * @since 1.0.0
 * @category type ids
 */
export const TypeId = /*#__PURE__*/Symbol.for("@effect/platform/HttpApiGroup");
/**
 * @since 1.0.0
 * @category guards
 */
export const isHttpApiGroup = u => Predicate.hasProperty(u, TypeId);
const Proto = {
  [TypeId]: TypeId,
  pipe() {
    return pipeArguments(this, arguments);
  }
};
const makeProto = options => {
  function HttpApiGroup() {}
  Object.setPrototypeOf(HttpApiGroup, Proto);
  return Object.assign(HttpApiGroup, options);
};
/**
 * An `HttpApiGroup` is a collection of `HttpApiEndpoint`s. You can use an `HttpApiGroup` to
 * represent a portion of your domain.
 *
 * The endpoints can be implemented later using the `HttpApiBuilder.group` api.
 *
 * @since 1.0.0
 * @category constructors
 */
export const make = identifier => makeProto({
  identifier,
  endpoints: Chunk.empty(),
  errorSchema: Schema.Never,
  annotations: Context.empty()
});
/**
 * Add an `HttpApiEndpoint` to an `HttpApiGroup`.
 *
 * @since 1.0.0
 * @category endpoints
 */
export const add = /*#__PURE__*/dual(2, (self, endpoint) => makeProto({
  identifier: self.identifier,
  errorSchema: self.errorSchema,
  annotations: self.annotations,
  endpoints: Chunk.append(self.endpoints, endpoint)
}));
/**
 * Add an error schema to an `HttpApiGroup`, which is shared by all endpoints in the
 * group.
 *
 * @since 1.0.0
 * @category errors
 */
export const addError = /*#__PURE__*/dual(args => isHttpApiGroup(args[0]), (self, schema, annotations) => makeProto({
  identifier: self.identifier,
  annotations: self.annotations,
  endpoints: self.endpoints,
  errorSchema: HttpApiSchema.UnionUnify(self.errorSchema, schema.annotations(HttpApiSchema.annotations({
    status: annotations?.status ?? HttpApiSchema.getStatusError(schema)
  })))
}));
/**
 * Add a path prefix to all endpoints in an `HttpApiGroup`. Note that this will only
 * add the prefix to the endpoints before this api is called.
 *
 * @since 1.0.0
 * @category endpoints
 */
export const prefix = /*#__PURE__*/dual(2, (self, prefix) => makeProto({
  identifier: self.identifier,
  errorSchema: self.errorSchema,
  annotations: self.annotations,
  endpoints: Chunk.map(self.endpoints, HttpApiEndpoint.prefix(prefix))
}));
/**
 * Merge the annotations of an `HttpApiGroup` with a new context.
 *
 * @since 1.0.0
 * @category annotations
 */
export const annotateMerge = /*#__PURE__*/dual(2, (self, context) => makeProto({
  ...self,
  annotations: Context.merge(self.annotations, context)
}));
/**
 * Add an annotation to an `HttpApiGroup`.
 *
 * @since 1.0.0
 * @category annotations
 */
export const annotate = /*#__PURE__*/dual(3, (self, tag, value) => makeProto({
  identifier: self.identifier,
  errorSchema: self.errorSchema,
  endpoints: self.endpoints,
  annotations: Context.add(self.annotations, tag, value)
}));
/**
 * For each endpoint in an `HttpApiGroup`, update the annotations with a new
 * context.
 *
 * Note that this will only update the annotations before this api is called.
 *
 * @since 1.0.0
 * @category annotations
 */
export const annotateEndpointsMerge = /*#__PURE__*/dual(2, (self, context) => makeProto({
  identifier: self.identifier,
  errorSchema: self.errorSchema,
  annotations: self.annotations,
  endpoints: Chunk.map(self.endpoints, HttpApiEndpoint.annotateMerge(context))
}));
/**
 * For each endpoint in an `HttpApiGroup`, add an annotation.
 *
 * Note that this will only add the annotation to the endpoints before this api
 * is called.
 *
 * @since 1.0.0
 * @category annotations
 */
export const annotateEndpoints = /*#__PURE__*/dual(3, (self, tag, value) => makeProto({
  identifier: self.identifier,
  errorSchema: self.errorSchema,
  annotations: self.annotations,
  endpoints: Chunk.map(self.endpoints, HttpApiEndpoint.annotate(tag, value))
}));
//# sourceMappingURL=HttpApiGroup.js.map